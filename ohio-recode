local Load = require(game:GetService("ReplicatedStorage").devv).load
local Signal = require(game:GetService("ReplicatedStorage").devv.client.Helpers.remotes.Signal)
local v3item = game:GetService("ReplicatedStorage").devv.client.Objects.v3item
local v4item = require(v3item)
local v3items = Load('v3items')

local melee = Load('v3item').melee
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait() 
local v3Inventory = require(v3item.modules.inventory)
local BaseItem = require(v3item.bin.baseItem)
local SafeZone = game:GetService("Workspace").SecretEggSpawns.SecretEgg3.CFrame

local Items = v3Inventory.items
local Fists

local BalloonAlways = false
local SafeMode, SafeMin = false, 100

function InitFists()
    for _, item in pairs(Items) do
        if item.name == 'Fists' then
            Fists = item 
            break
        end
    end
end
function CollectMoney(rootPart)
    local Cash = workspace.Game.Entities.CashBundle
    local collected = {}
    
    for _, Dollar in pairs(Cash:GetChildren()) do
        if Dollar and Dollar.PrimaryPart then
            local dist = (Dollar.PrimaryPart.Position - rootPart.Position).Magnitude
            if dist <= 20 then 
                table.insert(collected, Dollar)
            end
        end
    end
    
    for _, Dollar in ipairs(collected) do
        if Dollar and Dollar.PrimaryPart then
            rootPart.CFrame = Dollar.PrimaryPart.CFrame
            wait(0.5) 
        end
    end
end
function Process(IsSafeZone, Params)
    if Fists and character then
        local humanoid = character:FindFirstChild("Humanoid")
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        local atms = workspace.Game.Props.ATM
        local registers = workspace.Game.Props.CashRegister
        if humanoid and rootPart and humanoid.Health >= 100 then
            for _, atm in pairs(atms:GetChildren()) do
                if Params.ATM then
                    local screen = atm:FindFirstChild("Screen")
                    local atmPrimary = atm.PrimaryPart
                    
                    if screen and atmPrimary then
                        atmPrimary.CanCollide = false
                        
                        if screen.Color ~= Color3.fromRGB(255, 0, 0) then
                            local atmLook = atmPrimary.CFrame.LookVector
                            local atmRight = atmPrimary.CFrame.RightVector
                            local frontPosition = atmPrimary.Position - (atmLook * 3)
                            local lookAtCFrame = CFrame.new(frontPosition, atmPrimary.Position)
                            local cam = workspace.CurrentCamera
                            
                            repeat
                                cam.CFrame = CFrame.new(cam.CFrame.Position, atmPrimary.Position)
                            
                                rootPart.CFrame = lookAtCFrame
                                rootPart.CFrame = atmPrimary.CFrame
                                
                                local _, Equipped = v4item.GetEquipped(player)
                                if not Equipped then
                                    BaseItem.SetEquipped(Fists, true, false, true)
                                    wait(0.5) 
                                end
                                
                                task.wait(0.1)
                                melee.meleeHitreg(Fists, "meleepunch")
                                melee.onMeleeHit(player, "meleepunch")
                            until not screen or screen.Color == Color3.fromRGB(255, 0, 0) or humanoid.Health < 100
                            
                            if screen.Color == Color3.fromRGB(255, 0, 0) then
                                CollectMoney(rootPart)
                                task.wait(0.5)
                            end
                        end
                    end 
                end
                if humanoid.Health < 100 then
                    break
                end
            end
            for _, register in pairs(registers:GetChildren()) do
                pcall(function()
                    if Params.Register and register.CashDrawer then
                        local weld = register.CashDrawer.WeldConstraint
                        local atmPrimary = register.PrimaryPart
                        
                        if weld and atmPrimary then
                            atmPrimary.CanCollide = false
                            
                            if weld.Enabled then
                                local atmLook = atmPrimary.CFrame.LookVector
                                local atmRight = atmPrimary.CFrame.RightVector
                                local frontPosition = atmPrimary.Position - (atmLook * 3)
                                local lookAtCFrame = CFrame.new(frontPosition, atmPrimary.Position)
                                local cam = workspace.CurrentCamera
                                
                                repeat
                                    cam.CFrame = CFrame.new(cam.CFrame.Position, atmPrimary.Position)
                                
                                    rootPart.CFrame = lookAtCFrame
                                    rootPart.CFrame = atmPrimary.CFrame
                                    
                                    local _, Equipped = v4item.GetEquipped(player)
                                    if not Equipped then
                                        BaseItem.SetEquipped(Fists, true, false, true)
                                        wait(0.5) 
                                    end
                                
                                    task.wait(0.1)
                                    melee.meleeHitreg(Fists, "meleepunch")
                                    melee.onMeleeHit(player, "meleepunch")
                                until not weld or weld.Enabled == false or humanoid.Health < 100
                                
                                if weld.Enabled == false then
                                    task.wait(1)
                                    CollectMoney(rootPart)
                                    task.wait(0.5)
                                end
                            end
                        end 
                    end
                end)
                if humanoid.Health < 100 then
                    break
                end
            end
            if IsSafeZone then
                rootPart.CFrame = SafeZone 
            end
        end
    end 
end

local ReGui = loadstring(game:HttpGet('https://raw.githubusercontent.com/depthso/Dear-ReGui/refs/heads/main/ReGui.lua'))()
local PrefabsId = 'rbxassetid://71968920594655'
ReGui:Init({
	Prefabs = game:GetService("InsertService"):LoadLocalAsset(PrefabsId)
})
game:GetService("InsertService"):LoadLocalAsset(PrefabsId).Parent = workspace
local Window = ReGui:TabsWindow({
	Title = "Ohio killer ReCode | v2.5",
	Size = UDim2.new(0, 350, 0, 350),
	Position = UDim2.new(0.5, 0, 0, 70)
})

local FarmTab = Window:CreateTab({Name = 'Farm'})

FarmTab:Label({
    Text = "Working method to farm money"
}) 
FarmTab:Separator()

local Farm = false
local FarmSafeEnabled = true
local FarmTypes = {
    ATM = false,
    Register = false,
}

local VerticalRow = FarmTab:Indent({Offset=10}):Row()
VerticalRow:Checkbox({
	Value = false,
	Label = "ATMs?",
	Callback = function(self, Value: boolean)
		FarmTypes.ATM = Value
	end
})
VerticalRow:Checkbox({
	Value = false,
	Label = "Registers?",
	Callback = function(self, Value: boolean)
		FarmTypes.Register = Value
	end
})
FarmTab:Separator()

FarmTab:Checkbox({
	Value = FarmSafeEnabled,
	Label = "Safe zone",
	Callback = function(self, Value: boolean)
		FarmSafeEnabled = Value
	end
})

FarmTab:Checkbox({
	Value = Farm,
	Label = "Enabled",
	Callback = function(self, Value: boolean)
		Farm = Value
	end
})


InitFists()

task.spawn(function()
    while task.wait() do
        if Farm then
            Process(FarmSafeEnabled, FarmTypes) 
        end
    end
end)


FarmTab:Separator({Text = 'NOTE: To disable press ESC and disable, \nSometimes may bug atms'})

local PlayerTab = Window:CreateTab({Name = 'Player'})

PlayerTab:Label({
    Text = "Bypass AC"
}) 

PlayerTab:Separator()

local PlayerHeader = PlayerTab:CollapsingHeader({
    Title = 'Fake balloon'
})
local PlayerHeader0 = PlayerTab:CollapsingHeader({
    Title = 'Safe mode'
})
function StateBalloon(Value)
   local Balloon = require(v3item.bin.Holdable.modules.controller.modules.itemFuncs.Balloon)
    local item = {
        item = {
            multiplier = 0.8
        }
    }
    local method = if Value then 'onEquipped' else 'onUnequipped'
    Balloon[method](item) 
end

PlayerHeader:Checkbox({
	Value = false,
   	Label = "Enabled",
	Callback = function(self, Value: boolean)
		task.spawn(function()
		    StateBalloon(Value)
		end)
	end
})

PlayerHeader:Checkbox({
    Value = false,
    Label = "Always",
    Callback = function(self, Value: boolean)
    	task.spawn(function()
    		BalloonAlways = Value
    	end)
    end
})

PlayerHeader0:Separator({Text = 'NOTE: Teleports to safe zone when health < or = min'})
PlayerHeader0:SliderInt({
    Label = "Minimum",
    Value = 10,
    Minimum = 10,
    Maximum = 100,
    Callback = function(self, Value)
        SafeMin = Value
    end
})
PlayerHeader0:Checkbox({
    Value = false,
    Label = "Enabled",
    Callback = function(self, Value: boolean)
    	task.spawn(function()
            SafeMode = Value
    	end)
    end
})


local ValuablesTab = Window:CreateTab({Name = 'Valuables'})
ValuablesTab:Button({
	Text = "Find valuable",
	Callback = function(self)
		local Folder       = workspace.Game.Entities.ItemPickup
		local Trigger1     = workspace.MilitaryRobbery.MilitaryTrigger
		local Trigger2     = workspace.ArmoryRobbery.ArmoryTrigger
		local Priority     = 
		{
		    "Military", 
		    "Vest", 
		    "Keycard",
		    "Marker",
		    "Barrett",
		    'Gold',
		    'Present',
		    'Key',
		    'Money',
		    'RPG',
		    'Saiga',
		    'Scar',
		    'Block',
		    'M249',
		    'Hoverboard',
		    'Gravity',
		    'Dragunov',
		    'Void',
		    'C4',
		    'C5',
		    'Santa',
		    'Acid',
		    'AS Val',
		    'AUG',
		    'Python'
		    
		}
		local rootPart     = character:FindFirstChild("HumanoidRootPart")
		
		local allPickups = Folder:GetChildren()
		
		local partsIn1 = workspace:GetPartBoundsInBox(Trigger1.CFrame, Trigger1.Size)
		local partsIn2 = workspace:GetPartBoundsInBox(Trigger2.CFrame, Trigger2.Size)
		
		local inTriggerSet = {}
		for _, p in ipairs(partsIn1) do inTriggerSet[p] = true end
		for _, p in ipairs(partsIn2) do inTriggerSet[p] = true end
		
		for _, pickup in ipairs(allPickups) do
			local part = pickup.PrimaryPart
			if part then
				if inTriggerSet[part] then
					continue
				end
				
				local prompt = part:FindFirstChildOfClass("ProximityPrompt", true)
				if prompt then
					for _, keyword in ipairs(Priority) do
						if prompt.ObjectText:find(keyword) or prompt.ObjectText == keyword then
							if rootPart then
								rootPart.CFrame = part.CFrame
							end
							break
						end
					end
				end
			end
		end
	end
})
ValuablesTab:Button({
    Text = 'Remove cooldown',
    Callback = function()
        for _, o in pairs(workspace:GetDescendants()) do
            if o:IsA('ProximityPrompt') then
                o.HoldDuration = 0
            end
        end
    end,
})
ValuablesTab:Button({
    Text = 'Sell Equipped',
    Callback = function()
        task.spawn(function()
            local _, item = v4item.GetEquipped(player)
            if item then
                Signal.FireServer("sellItem", item) 
            end
        end)
    end,
})
local before = CFrame.new(0, 0, 0)
while wait() do
    task.spawn(function()
        if BalloonAlways then
            StateBalloon(true) 
        end
    end)
    task.spawn(function()
        if SafeMode then
            local humanoid = character:FindFirstChild("Humanoid")
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoid.Health <= SafeMin then
                rootPart.CFrame = SafeZone
                repeat
                    task.wait(1)
                until humanoid.Health >= SafeMin
                rootPart.CFrame = before
            else
                before = rootPart.CFrame
            end
        end
    end)
end
