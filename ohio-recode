local Bracket = loadstring(game:HttpGet('https://raw.githubusercontent.com/AlexR32/Bracket/refs/heads/main/BracketV34_dev.lua'))()
function CreateNotification(options)
    options = options or {}
    local StarterGui = game:GetService("StarterGui")
    local callback = Instance.new("BindableFunction")
    
    callback.OnInvoke = function(buttonPressed)
        if buttonPressed == "OK" then
            if options.OnOk and type(options.OnOk) == 'function' then
                pcall(options.OnOk)
            end
        elseif buttonPressed == "Cancel" then
            if options.OnCancel and type(options.OnCancel) == 'function' then
                pcall(options.OnCancel)
            end
        end

        callback:Destroy()
    end

    StarterGui:SetCore("SendNotification", {
        Title = options.Title or "Notification",
        Text = options.Message or "",
        Duration = math.huge,
        Button1 = "OK",
        Button2 = "Cancel",
        Callback = callback
    })
end

local Load = require(game:GetService("ReplicatedStorage").devv).load
local Signal = require(game:GetService("ReplicatedStorage").devv.client.Helpers.remotes.Signal)
local v3item = game:GetService("ReplicatedStorage").devv.client.Objects.v3item
local v4item = require(v3item)
local v3items = Load('v3items')
local GUID = Load("GUID")
local projectileLib = v4item.projectiles
local melee = Load('v3item').melee
local player = game:GetService("Players").LocalPlayer
local mouse = player:GetMouse()
local character = player.Character or player.CharacterAdded:Wait()
local v3Inventory = require(v3item.modules.inventory)
local BaseItem = require(v3item.bin.baseItem)
local SafeZone = game:GetService("Workspace").SecretEggSpawns.SecretEgg3.CFrame

local Replicator = require(game:GetService("ReplicatedStorage").devv.client.Helpers.objectProperties.ClientReplicator)

local Items = v3Inventory.items
local Fists

local SafeMode, SafeHeal, SafeName, SafeArmor, SafeMin = false, false, false, false, 100
local Farm = false
local FarmSafeEnabled = false
local LockerEnabled = false
local MovementSpeed, MovementHeight = 1, 1
local FarmTypes = {
    ATM = false,
    Register = false,
    Fly = false,
    Hidden = false,
}
local PlayerMethods = {
    KillAura = false,
    AutoStomp = false,
    Fly = false,
    Target = nil,
    TargetKill = false,
    AutoLoot = false,
    AutoLootSafe = false,
    AutoSell = false,
    Notification = false,
    Notification2 = false,
}
local ItemMethods = {
    Enabled = false,
    Item = '',
    FastShoot = false,
    SilentShoot = false,
    AllowedShoot = false,
    NoSpread = false,
}
local Nav = {
    Flying = false,
    Forward = false,
    Backward = false,
    Left = false,
    Right = false
}

local Priority = {
    "Military",
    "Vest",
    "Keycard",
    "Marker",
    "Barrett",
    'Gold',
    'Present',
    'Key',
    'Money',
    'RPG',
    'Saiga',
    'Scar',
    'Block',
    'M249',
    'Hoverboard',
    'Gravity',
    'Dragunov',
    'Void',
    'Dark',
    'C4',
    'C5',
    'Santa',
    'Acid',
    'AS Val',
    'AUG',
    'Python',
    'RPK',
    'FN',
    'P90',
    'Diamond',
    'Tactical',
    'Topaz',
    'Treasure',
    'Grenade',
    'Nuke',
    'AR-15',
    'MP7',
    'Deagle',
    'Gun',
    'Glock',
    'Flamethrower',
    'Ruby',
    'Sapphire',
    'Amethyst',
    'Rollie',
}

--TODO: Auto Leave
--TODO: Ammo auto buy
--TODO: Simple ESP

local ValuableAuto, ValuableSafe = false, false

local function getCurrentCharacter()
    return player.Character or player.CharacterAdded:Wait()
end
function Shoot(item, aimPoint, mode)
    if not item.ammoManager:UseAmmo(1) then
        return false
    end

    local projectilesData = {}
    local muzzle = item.model.PrimaryPart.Muzzle
    local muzzlePos = muzzle.WorldCFrame.Position
    local spread = if not ItemMethods.NoSpread then item.baseSpread else 0
    
    for i = 1, item.numProjectiles do
        local angle = math.rad(spread) * (math.random() * 2 - 1)
        local axisVec = Vector3.new(math.random()*2-1, math.random()*2-1, 0).Unit
        local baseCF = CFrame.new(muzzlePos, aimPoint)
        local cf = baseCF * CFrame.fromAxisAngle(axisVec, angle)
        
        local guid = GUID()
        projectileLib.newProjectileOfType(item.projectileType, {
            itemName = item.name,
            cframe = cf,
            visualCFrame = cf,
            guid = guid,
            isPlayerOwned = true,
            length = item.projectileLength,
            lifetime = item.projectileLifetime,
            owner = player
        })
        
        table.insert(projectilesData, {guid, cf})
    end

    Signal.FireServer("replicateShot")
    Signal.FireServer("replicateProjectiles", item.guid, projectilesData, mode)
    item.lastShot = os.clock()
    
    return true
end
local function SilentMouse(wallCheckEnabled, knockedCheckEnabled)
    wallCheckEnabled = wallCheckEnabled or false
    knockedCheckEnabled = knockedCheckEnabled or false
    
    local myCharacter = getCurrentCharacter()
    if not myCharacter then return end
    local myHead = myCharacter:FindFirstChild("Head")
    if not myHead then return end
    
    local bestHead, bestScore = nil, math.huge
    local camera = workspace.CurrentCamera
    
    for _, _player in ipairs(game:GetService("Players"):GetPlayers()) do
        if _player ~= player and _player.Character then
            local char = _player.Character
            local head = char:FindFirstChild("Head")
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            
            local isKnocked = false
            if knockedCheckEnabled then
                isKnocked = Replicator.Get(_player, 'knocked')
            end
            
            if head and humanoid and humanoid.Health > 0 and not isKnocked then
                local visible = true
                if wallCheckEnabled then
                    local raycastParams = RaycastParams.new()
                    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                    raycastParams.FilterDescendantsInstances = {myCharacter, char}
                    
                    local ray = workspace:Raycast(
                        myHead.Position,
                        (head.Position - myHead.Position),
                        raycastParams
                    )
                    
                    visible = ray == nil
                end
                
                if visible then
                    local worldDist = (myHead.Position - head.Position).Magnitude
                    local screenPos, onScreen = camera:WorldToScreenPoint(head.Position)
                    
                    if onScreen then
                        local screenDist = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                        local score = worldDist * 0.7 + screenDist * 0.3
                        
                        if score < bestScore then
                            bestScore = score
                            bestHead = head
                        end
                    end
                end
            end
        end
    end
    
    return bestHead
end

function GetItem(Name)
    for _, item in pairs(Items) do
        if item.name == Name then
            return item
        end
    end
end

function CollectMoney(rootPart, radius)
    if not radius then
        radius = 20 
    end
    local Cash = workspace.Game.Entities.CashBundle
    local collected = {}

    for _, Dollar in pairs(Cash:GetChildren()) do
        if Dollar and Dollar.PrimaryPart then
            local dist = (Dollar.PrimaryPart.Position - rootPart.Position).Magnitude
            if dist <= radius then
                table.insert(collected, Dollar)
            end
        end
    end

    for _, Dollar in ipairs(collected) do
        if Dollar and Dollar.PrimaryPart then
            repeat
                pcall(function()
                    task.wait(0.1)
                    rootPart.CFrame = Dollar.PrimaryPart.CFrame
                end)
            until not Dollar or Dollar.Parent == nil or not Dollar.PrimaryPart
        end
    end
end

function Process(IsSafeZone, Params)
    pcall(function()
        if not Fists then return end

        local character = getCurrentCharacter()
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")
        local rootPart = character and character:FindFirstChild("HumanoidRootPart")

        if not (humanoid and rootPart and humanoid.Health >= 100) then
            return
        end

        local function FarmProp(prop, checkCondition)
            local primaryPart = prop.PrimaryPart
            if not primaryPart then return true end 

            primaryPart.CanCollide = false
            local hidden = if Params.Hidden then 0.01 else 3
            local lookAtCFrame = CFrame.new(primaryPart.Position + (primaryPart.CFrame.LookVector * hidden), primaryPart.Position)

            local _, equipped = v4item.GetEquipped(player)
            if not equipped then
                BaseItem.SetEquipped(Fists, true, false, true)
                task.wait(0.5)
            end

            local propGUID = prop:GetAttribute('guid')
            if not propGUID then return true end

            local hitTable = { guid = propGUID, meleeType = "meleepunch" }
            local timeout = 100
            
            while checkCondition(prop) and humanoid.Health >= 100 and timeout > 0 do
                rootPart.CFrame = lookAtCFrame
                task.spawn(function()
                    Signal.FireServer("meleeItemHit", "prop", hitTable)
                end)
                timeout -= 1
                task.wait(0.1)
            end
            
            if not checkCondition(prop) then
                CollectMoney(rootPart)
            end

            return humanoid.Health >= 100
        end

        if Params.ATM then
            local atms = workspace.Game.Props.ATM:GetChildren()
            for _, atm in ipairs(atms) do
                local shouldContinue = pcall(function()
                    local screen = atm:FindFirstChild("Screen")
                    if screen and screen.Color ~= Color3.fromRGB(255, 0, 0) then
                        return FarmProp(atm, function(p)
                            local s = p and p:FindFirstChild("Screen")
                            return s and s.Color ~= Color3.fromRGB(255, 0, 0)
                        end)
                    end
                    return true
                end)
                if not shouldContinue then break end
                if not Farm then return end
            end
        end

        if humanoid.Health < 100 then
            if IsSafeZone then rootPart.CFrame = SafeZone end
            return
        end

        if Params.Register then
            local registers = workspace.Game.Props.CashRegister:GetChildren()
            for _, register in ipairs(registers) do
                local shouldContinue = pcall(function()
                    local weld = register:FindFirstChild("CashDrawer") and register.CashDrawer:FindFirstChild("WeldConstraint")
                    if weld and weld.Enabled then
                        return FarmProp(register, function(p)
                            local w = p and p:FindFirstChild("CashDrawer") and p.CashDrawer:FindFirstChild("WeldConstraint")
                            return w and w.Enabled
                        end)
                    end
                    return true
                end)
                if not shouldContinue then break end
                if not Farm then return end
            end
        end
        

        if FarmSafeEnabled then
            rootPart.CFrame = SafeZone
        end
    end)
end
function Seek(radius)
    local character = getCurrentCharacter()
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    local FoldersToSearch = {
        workspace.Game.Entities.ItemPickup,
    }
    
    local Trigger1 = workspace.MilitaryRobbery.MilitaryTrigger
    local Trigger2 = workspace.ArmoryRobbery.ArmoryTrigger

    local allPickups = {}
    for _, folder in ipairs(FoldersToSearch) do
        if folder then
            for _, item in ipairs(folder:GetChildren()) do
                table.insert(allPickups, item)
            end
        end
    end

    local partsIn1 = workspace:GetPartBoundsInBox(Trigger1.CFrame, Trigger1.Size)
    local partsIn2 = workspace:GetPartBoundsInBox(Trigger2.CFrame, Trigger2.Size)
    local bounds = workspace.BankRobbery.BankAlarmTrigger
    local door = workspace.BankRobbery.VaultDoor.Door.Attachment.ProximityPrompt
    local partsIn3 = workspace:GetPartBoundsInBox(bounds.CFrame, bounds.Size)

    local MilitarySet = {}
    local PoliceSet = {}
    local BankSet = {}
    for _, p in ipairs(partsIn1) do MilitarySet[p] = true end
    for _, p in ipairs(partsIn2) do PoliceSet[p] = true end
    for _, p in ipairs(partsIn3) do BankSet[p] = true end
    
    local PoliceDoor, MilitaryDoor
    for i, v in pairs(workspace.Game.Props.Door:GetChildren()) do
        if v then
            if v.DoorMain then
                local keyName = v:GetAttribute('keycardName')
                if keyName == 'policeArmory' then
                    PoliceDoor = v 
                elseif keyName == 'militaryArmory' then
                    MilitaryDoor = v 
                end
            end
        end
    end
    
    if not radius then
        radius = math.huge 
    end

    local bestFound = { prompt = nil, part = nil, priorityIndex = math.huge, proxp = nil }

    for _, pickup in ipairs(allPickups) do
        local part = pickup.PrimaryPart
        if part then
            if MilitarySet[part] then
                if MilitaryDoor:GetAttribute('locked') == true then
                    continue 
                end
            end
            
            if PoliceSet[part] then
                if PoliceDoor:GetAttribute('locked') == true then
                    continue 
                end
            end
            
            if BankSet[part] then
                if door.Enabled == true then
                    continue 
                end
            end
            
            if (part.Position - rootPart.Position).Magnitude <= radius then
                local prompt = pickup:GetAttribute('itemName')
                
                if prompt then
                    if prompt:find('Vest') or prompt == 'Police Armory Keycard' or prompt == 'Military Armory Keycard' or prompt == 'Hoverboard' or prompt == 'Taser Gun' then
                        if GetItem(prompt) then
                            continue
                        end
                    end

                    for i, keyword in ipairs(Priority) do
                        if (prompt:find(keyword) or prompt == keyword) then
                            if i < bestFound.priorityIndex then
                                bestFound.prompt = prompt
                                bestFound.part = part
                                bestFound.priorityIndex = i
                                pcall(function()
                                    bestFound.proxp = pickup:FindFirstChildOfClass('ProximityPrompt') or part:FindFirstChildOfClass('ProximityPrompt')
                                end)
                            end
                            break 
                        end
                    end
                end
            end
        end
    end

    return bestFound.prompt, bestFound.part, bestFound.proxp
end
function SeekSC()
    local rootPart = getCurrentCharacter() and getCurrentCharacter():FindFirstChild('HumanoidRootPart')
    if not rootPart then return end
    
    local safesAndChests = {}
    local searchFolders = {
        workspace.Game.Entities,
    }
    local bounds = workspace.BankRobbery.BankAlarmTrigger
    local door = workspace.BankRobbery.VaultDoor.Door.Attachment.ProximityPrompt
    local partsIn1 = workspace:GetPartBoundsInBox(bounds.CFrame, bounds.Size)

    local inTriggerSet = {}
    for _, p in ipairs(partsIn1) do
        inTriggerSet[p] = true
    end
    for _, folder in ipairs(searchFolders) do
        for _, obj in ipairs(folder:GetDescendants()) do
            if obj:IsA("Model") and (obj.Name:find("Safe") or obj.Name:find("Chest")) then
                local part = obj.PrimaryPart
                local prompt = obj:FindFirstChild("ProximityPrompt", true)
                if part and inTriggerSet[part] and door.Enabled == true then
                    continue
                end
                if prompt then
                    table.insert(safesAndChests, {
                        model = obj,
                        prompt = prompt,
                        primary = part
                    })
                end
            end
        end
    end
    
    return safesAndChests
end
function diff(table1, table2)
    local set1 = {}
    for _, v in pairs(table1) do
        set1[v] = true
    end
    for _, v in pairs(table2) do
        if not set1[v] then
            return v
        end
    end
    return nil
end
function InitAll()
    task.spawn(function()
        while task.wait() do
            if SafeArmor then
                local Armor = player:GetAttribute('armor')
                if Armor then
                    local character_ = getCurrentCharacter()
    				local RootPart = character_ and character_:FindFirstChild("HumanoidRootPart")
    				if RootPart then
        				if Armor <= 29 then
                            local bandage = GetItem('Light Vest')
                			if bandage then
                				BaseItem.SetEquipped(bandage, true, true, true)
                				Signal.FireServer("useConsumable", bandage.guid)
                				Signal.FireServer("removeItem", bandage.guid)
                			else
                			    Signal.InvokeServer('attemptPurchase', 'Light Vest')
                			end  
                        end
    				end
                end
            end 
        end
    end)
	task.spawn(function()
		local beforeCFrame = nil
		local isSafeModeActive = false
        local hided = false
		while task.wait() do
			pcall(function()
				Fists = GetItem('Fists')
				if SafeName then
                    local mask = GetItem('Surgeon Mask')
            
                    if mask then
                        if not hided then
                            Signal.FireServer("equip", mask.guid)
                            Signal.FireServer("wearMask", mask.guid)
                            hided = true
                        end
                    else
                        Signal.InvokeServer('attemptPurchase', 'Surgeon Mask')
                    end
                else
                    if hided then
                        hided = false
                    end
                end
				
				local character = getCurrentCharacter()
				local humanoid = character and character:FindFirstChildOfClass("Humanoid")
				local rootPart = character and character:FindFirstChild("HumanoidRootPart")

				if not (humanoid and rootPart and humanoid.Health > 0) then
				    hided = false
					return
				end

				if not SafeMode then
					return
				end

				if isSafeModeActive then
					return
				end

				if humanoid.Health <= SafeMin then
					if SafeMode and not isSafeModeActive then
					    isSafeModeActive = true
    					beforeCFrame = rootPart.CFrame
    					rootPart.CFrame = SafeZone 
					end

					task.spawn(function()
						pcall(function()
							local currentCharacter = getCurrentCharacter()
							local currentHumanoid = currentCharacter and currentCharacter:FindFirstChildOfClass("Humanoid")

							while SafeMode and currentHumanoid and currentHumanoid.Health > 0 and currentHumanoid.Health <= SafeMin do
								task.wait(0.1)
								currentCharacter = getCurrentCharacter()
								currentHumanoid = currentCharacter and currentCharacter:FindFirstChildOfClass("Humanoid")
							end

	
							local finalCharacter = getCurrentCharacter()
							local finalRootPart = finalCharacter and finalCharacter:FindFirstChild("HumanoidRootPart")
							if finalRootPart and beforeCFrame then
								finalRootPart.CFrame = beforeCFrame
							end
						end)
						isSafeModeActive = false
					end)
				end
			end)
		end
	end) -- Auto safe
    task.spawn(function()
		while task.wait() do
			pcall(function()
				local character = getCurrentCharacter()
				local humanoid = character and character:FindFirstChildOfClass("Humanoid")
				local rootPart = character and character:FindFirstChild("HumanoidRootPart")
                if not humanoid then return end
				if humanoid.Health <= SafeMin then
					task.spawn(function()
						pcall(function()
							local currentCharacter = getCurrentCharacter()
							local currentHumanoid = currentCharacter and currentCharacter:FindFirstChildOfClass("Humanoid")

							while SafeHeal and currentHumanoid and currentHumanoid.Health > 0 and currentHumanoid.Health <= SafeMin do
								if SafeHeal and not Replicator.Get(player, 'knocked') then
									local bandage = GetItem('Bandage')
									if bandage then
										BaseItem.SetEquipped(bandage, true, true, true)
										Signal.FireServer("useConsumable", bandage.guid)
										Signal.FireServer("removeItem", bandage.guid)
									else
										Signal.InvokeServer('attemptPurchase', 'Bandage')
									end
								end
								task.wait(0.1)
								currentCharacter = getCurrentCharacter()
								currentHumanoid = currentCharacter and currentCharacter:FindFirstChildOfClass("Humanoid")
							end
						end)
					end)
				end
			end)
		end
    end) -- Auto heal
	task.spawn(function()
		while task.wait() do 
			pcall(function()
				local backpack = player.PlayerGui:FindFirstChild("Backpack")
				if backpack and backpack.Enabled then
					local holder = backpack:FindFirstChild("Holder")
					local locker = holder and holder:FindFirstChild("Locker")
					if locker then
						locker.Visible = LockerEnabled
					end
				end
			end)
		end
	end) -- Locker
	task.spawn(function()
		local UIS = game:GetService("UserInputService")
		local Camera = workspace.CurrentCamera

		UIS.InputBegan:Connect(function(input, gameProcessed)
			if gameProcessed then return end
			if input.UserInputType == Enum.UserInputType.Keyboard then
				if input.KeyCode == Enum.KeyCode.W then Nav.Forward = true
				elseif input.KeyCode == Enum.KeyCode.S then Nav.Backward = true
				elseif input.KeyCode == Enum.KeyCode.A then Nav.Left = true
				elseif input.KeyCode == Enum.KeyCode.D then Nav.Right = true
				end
			end
		end)

		UIS.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.Keyboard then
				if input.KeyCode == Enum.KeyCode.W then Nav.Forward = false
				elseif input.KeyCode == Enum.KeyCode.S then Nav.Backward = false
				elseif input.KeyCode == Enum.KeyCode.A then Nav.Left = false
				elseif input.KeyCode == Enum.KeyCode.D then Nav.Right = false
				end
			end
		end)

		Camera:GetPropertyChangedSignal("CFrame"):Connect(function()
			if Nav.Flying then
				local character_ = getCurrentCharacter()
				local RootPart = character_ and character_:FindFirstChild("HumanoidRootPart")
				if RootPart then
					RootPart.CFrame = CFrame.new(RootPart.CFrame.Position, RootPart.CFrame.Position + Camera.CFrame.LookVector)
				end
			end
		end)


		while task.wait() do
			pcall(function()
				local character_ = getCurrentCharacter()
				local RootPart = character_ and character_:FindFirstChild("HumanoidRootPart")
				if RootPart then
					RootPart.Anchored = PlayerMethods.Fly
				end
                
                local AUTO_STOMP_RADIUS = 35
                local KILL_AURA_RADIUS = 35
                
                if PlayerMethods.AutoStomp then
                    local character_ = getCurrentCharacter()
                    local rootPart = character_ and character_:FindFirstChild("HumanoidRootPart")
                    if not rootPart then return nil end
                    
                    for _, p in ipairs(game:GetService("Players"):GetPlayers()) do
                        if p ~= player then
                            local char = p.Character
                            local isKnocked = Replicator.Get(p, 'knocked')
                            if char and isKnocked then
                                local hrp = char:FindFirstChild("HumanoidRootPart")
                                if hrp and (rootPart.Position - hrp.Position).Magnitude <= AUTO_STOMP_RADIUS then
                                    Signal.FireServer("stomp", p)
                                end
                            end
                        end
                    end 
                end
                
                if PlayerMethods.KillAura then
                    local character_ = getCurrentCharacter()
                    local rootPart = character_ and character_:FindFirstChild("HumanoidRootPart")
                    if not rootPart then return nil end
                    
                    for _, p in ipairs(game:GetService("Players"):GetPlayers()) do
                        if p ~= player then
                            local char = p.Character
                            local isKnocked = Replicator.Get(p, 'knocked')
                            if char and not isKnocked then
                                local hrp = char:FindFirstChild("HumanoidRootPart")
                                if hrp and (rootPart.Position - hrp.Position).Magnitude <= KILL_AURA_RADIUS then
                                    local Table = { ["hitPlayerId"] = p.UserId, ["meleeType"] = 'meleemegapunch' }
                                    Signal.FireServer("meleeItemHit", "player", Table)
                                end
                            end
                        end
                    end
                end

				if PlayerMethods.Fly and Nav.Flying then
					local Speed = 2
					local FlyRoot = getCurrentCharacter() and getCurrentCharacter():FindFirstChild("HumanoidRootPart")
					if not FlyRoot then return end

					local moveDirection = Vector3.new()
					if Nav.Forward then moveDirection = moveDirection + Camera.CFrame.LookVector end
					if Nav.Backward then moveDirection = moveDirection - Camera.CFrame.LookVector end
					if Nav.Left then moveDirection = moveDirection - Camera.CFrame.RightVector end
					if Nav.Right then moveDirection = moveDirection + Camera.CFrame.RightVector end

					if moveDirection.Magnitude > 0 then
						FlyRoot.CFrame = FlyRoot.CFrame + moveDirection.Unit * Speed
					end
				end
			end)
		end
	end)
	task.spawn(function()
	    local isValuableHunting = false
		while task.wait(0.1) do
			if ValuableAuto and not PlayerMethods.Fly and not isValuableHunting then
				pcall(function()
					local prompt, part, proxp = Seek()

					if prompt and part then
						if prompt:find('Paint') or prompt:find('Ring') or prompt:find('Gun') then
							return
						end

						isValuableHunting = true

						local function Step()
							task.spawn(function()
								pcall(function()
									if not ValuableAuto then
										isValuableHunting = false
										return
									end
									if part and part.Parent and proxp and proxp.Parent then
										local character_ = getCurrentCharacter()
										local RootPart = character_:FindFirstChild("HumanoidRootPart")
										if RootPart then
											RootPart.CFrame = part.CFrame
											fireproximityprompt(proxp)
										end
									end
								end)
								isValuableHunting = false
							end)
						end

						if PlayerMethods.Notification2 then
							CreateNotification({
								Title = "Auto-Valuable",
								Message = string.format("Found %s. Teleport?", prompt),
								OnOk = Step,
								OnCancel = function()
									isValuableHunting = false
								end
							})
						else
							Step()
						end
					elseif ValuableSafe and not part then
						local character_ = getCurrentCharacter()
						local RootPart = character_:FindFirstChild("HumanoidRootPart")
						if RootPart then
							RootPart.CFrame = SafeZone
						end
						ValuableAuto = false
					end
				end)
			end
		end
	end)
	task.spawn(function()
    	while task.wait() do
    		if PlayerMethods.Target and PlayerMethods.TargetKill then
    			pcall(function()
    				local targetPlayer = game:GetService('Players'):FindFirstChild(PlayerMethods.Target)
    				if not targetPlayer then return end
    
    				local targetCharacter = targetPlayer.Character
    				local selfCharacter = getCurrentCharacter()
    				if not (targetCharacter and selfCharacter) then return end
    
    				local targetRoot = targetCharacter:FindFirstChild('HumanoidRootPart')
    				local selfRoot = selfCharacter:FindFirstChild('HumanoidRootPart')
    				if not (targetRoot and selfRoot) then return end
    
    				if targetCharacter:FindFirstChild('ForceField') or selfCharacter:FindFirstChild('ForceField') then
    					return
    				end
    
    				selfRoot.CFrame = targetRoot.CFrame
    
    				local _, equipped = v4item.GetEquipped(player)
    				if not equipped then
    					BaseItem.SetEquipped(Fists, true, false, true)
    				end
    
    				local Table = { ["hitPlayerId"] = targetPlayer.UserId, ["meleeType"] = 'meleemegapunch' }
    				Signal.FireServer("meleeItemHit", "player", Table)
    				Signal.FireServer("stomp", targetPlayer)
    			end)
    		end
    	end
	end)
    task.spawn(function()
        --pcall(function()
            while task.wait() do
                local dt = .01
                local selfCharacter = getCurrentCharacter()
    			if selfCharacter then
        			local selfRoot = selfCharacter:FindFirstChild('HumanoidRootPart')
        			if selfRoot then
            			local selfHum = selfCharacter:FindFirstChild('Humanoid')
            			if selfHum then
                            local isJumping = false
                            if not PlayerMethods.Fly and not selfHum.SeatPart then
                            	local moveDir = selfHum.MoveDirection
                            	if moveDir.Magnitude > 0 and MovementSpeed > 1 and selfRoot then
                            		selfRoot.CFrame = selfRoot.CFrame + (moveDir * MovementSpeed * 10 * dt)     
                            	end
                            
                            	local state = selfHum:GetState()
                            	if state == Enum.HumanoidStateType.Jumping and not isJumping and MovementHeight > 1 then
                            		isJumping = true
                            		selfRoot.AssemblyLinearVelocity = Vector3.new(
                            			selfRoot.AssemblyLinearVelocity.X,
                            			MovementHeight * 10,                                              
                            			selfRoot.AssemblyLinearVelocity.Z
                            		)
                            	elseif state ~= Enum.HumanoidStateType.Jumping then
                            		isJumping = false
                            	end
                            end 
            			end
                    end
                end
            end
        --end)
    end)
    task.spawn(function()
    	local backto = nil
    	local currentTargetName = nil
    
    	while task.wait() do
    		if PlayerMethods.Target ~= currentTargetName then
    			if currentTargetName and backto then
    				pcall(function()
    					local oldPlayer = game:GetService("Players"):FindFirstChild(currentTargetName)
    					if oldPlayer and oldPlayer.Character then
    						local oldRoot = oldPlayer.Character:FindFirstChild("HumanoidRootPart")
    						if oldRoot then
    							oldRoot.CFrame = backto
    						end
    					end
    				end)
    			end
    			currentTargetName = PlayerMethods.Target
    			backto = nil
    		end
    
    		if currentTargetName and PlayerMethods.TargetBring then
    			pcall(function()
    				local targetPlayer = game:GetService('Players'):FindFirstChild(currentTargetName)
    				if not targetPlayer or not targetPlayer.Character then return end
    
    				local selfCharacter = getCurrentCharacter()
    				if not selfCharacter then return end
    
    				local targetRoot = targetPlayer.Character:FindFirstChild('HumanoidRootPart')
    				local selfRoot = selfCharacter:FindFirstChild('HumanoidRootPart')
    				if not (targetRoot and selfRoot) then return end
    
    				if targetPlayer.Character:FindFirstChild('ForceField') or selfCharacter:FindFirstChild('ForceField') then
    					return
    				end
    	 
    				if not backto then
    					backto = targetRoot.CFrame 
    				end
    				
    				local endCframe = CFrame.new(selfRoot.Position + (selfRoot.CFrame.LookVector * 4), selfRoot.Position)
    				targetRoot.CFrame = endCframe
    			end)
    		elseif currentTargetName and not PlayerMethods.TargetBring then
    			if backto then
    				pcall(function()
    					local targetPlayer = game:GetService('Players'):FindFirstChild(currentTargetName)
    					if not targetPlayer or not targetPlayer.Character then return end
    					local targetRoot = targetPlayer.Character:FindFirstChild('HumanoidRootPart')
    					if not targetRoot then return end
    					
    					targetRoot.CFrame = backto
    					backto = nil
    				end)
    			end
    		end
    	end
    end)
    task.spawn(function()
        local isAutoLooting = false
		while task.wait() do
			if PlayerMethods.AutoLoot and not PlayerMethods.Fly and not isAutoLooting then
				pcall(function()
					local lootables = SeekSC()

					if #lootables > 0 then
						isAutoLooting = true

						local function Step()
							task.spawn(function()
								pcall(function()
									local char = getCurrentCharacter()
									local root = char and char:FindFirstChild('HumanoidRootPart')
									if not root then
										isAutoLooting = false
										return
									end
                                    if not PlayerMethods.AutoLoot then return end
									local originalCFrame = root.CFrame

									for _, lootable in ipairs(lootables) do
                                        if not PlayerMethods.AutoLoot then break end
										if lootable and lootable.primary and lootable.primary.Parent and lootable.prompt and lootable.prompt.Parent then
											root = getCurrentCharacter() and getCurrentCharacter():FindFirstChild('HumanoidRootPart')
											if not root then break end

											lootable.prompt.HoldDuration = 0

											repeat
												if not GetItem('Lockpick') then
													Signal.InvokeServer('attemptPurchase', 'Lockpick')
													if not GetItem('Lockpick') then break end 
												end
												local lookAtCFrame = CFrame.new(lootable.primary.Position - (lootable.primary.CFrame.LookVector * 3), lootable.primary.Position)
												root.CFrame = lookAtCFrame
												fireproximityprompt(lootable.prompt)
												task.wait(0.1)
											until not lootable.prompt or not lootable.prompt.Parent
                                            if not PlayerMethods.AutoLoot then break end
                                            local retry = 0
											repeat
											    task.wait(.1)
                                                local founded, part, proxp = Seek(30)
                                                retry += 1
                                            until (part and proxp) or retry >= 30
											local founded, part, proxp = Seek(30)
											if founded and part and part.Parent and proxp then
												if not founded:find('Paint') and not founded:find('Ring') then
													root.CFrame = part.CFrame
												end
												local object = founded
												local retry = 0
												if proxp then
												    repeat
    												    retry += 1
    													fireproximityprompt(proxp)
    													task.wait(0.1)
    												until not part or not part.Parent or retry >= 10 or not proxp 
												end

												if PlayerMethods.AutoSell then
													task.spawn(function()
														pcall(function()
															local retry = 0
															repeat
															    if not PlayerMethods.AutoLoot then break end
            													task.wait(0.1)
            													retry += 1
            													local item = GetItem(object)
            													if item then
            														v3Inventory.unequipAll(true)
            														BaseItem.SetEquipped(item, true, false, true)
            														local _, equipped = v4item.GetEquipped(player)
            														if _.sellPrice then
            														    Signal.FireServer("sellItem", equipped)
            													    end
            													end
            												until not GetItem(object) or retry >= 10
														end)
													end)
												end
											else
												CollectMoney(root, 30)
											end
										end
									end
									root = getCurrentCharacter() and getCurrentCharacter():FindFirstChild('HumanoidRootPart')
									if root then
										if PlayerMethods.AutoLootSafe then
											root.CFrame = SafeZone
										else
											root.CFrame = originalCFrame
										end
									end
								end)
								isAutoLooting = false
							end)
						end

						if PlayerMethods.Notification then
							CreateNotification({
								Title = "Auto-Loot",
								Message = string.format("Found %d Safe/Chest(s). Teleport?", #lootables),
								OnOk = Step,
								OnCancel = function()
									isAutoLooting = false
								end
							})
						else
							Step()
						end
					end
				end)
			end
		end
	end)
	task.spawn(function()
		while task.wait() do
			pcall(function()
				local character = getCurrentCharacter()
				local humanoid = character and character:FindFirstChild("Humanoid")
				if not (humanoid and humanoid.Health > 0) then return end

				if ItemMethods.Item and ItemMethods.Enabled then
					local item = GetItem(ItemMethods.Item)
					if not item then
						Signal.InvokeServer('attemptPurchase', ItemMethods.Item)
						item = GetItem(ItemMethods.Item)
					end

					if item then
						local _, equipped = v4item.GetEquipped(player)
						if not equipped then
							BaseItem.SetEquipped(item, true, false, true)
						end
					end
				end
			end)
		end
	end)
	task.spawn(function()
		while task.wait(1) do
			pcall(function()
				local character = getCurrentCharacter()
				local humanoid = character and character:FindFirstChild("Humanoid")
				if not (humanoid and humanoid.Health > 0) then return end

				if ItemMethods.Call and ItemMethods.CallEnabled then
					Signal.FireServer("dropMoney", ItemMethods.Call)
				end
			end)
		end
	end)
	task.spawn(function()
		while task.wait(0.1) do
			if Farm then
				pcall(Process, FarmSafeEnabled, FarmTypes)
			end
		end
	end)
	task.spawn(function()
		while task.wait() do 
			pcall(function()
			    local item, _ = v4item.GetEquipped(player)
				if ItemMethods.AmmoBuy then
				    local success, itemId = Signal.InvokeServer("attemptPurchaseAmmo", item.name)
                    if success then
                        local purchasedItem = item
                        local ammoAmount = item.ammoPurchaseAmount or item.ammo
                        if purchasedItem then
                            local ammoMgr = purchasedItem.ammoManager
                            if ammoMgr then
                                if item.isConsumable then
                                    ammoMgr:setAmmo(ammoMgr.ammo + ammoAmount)
                                else
                                    ammoMgr:setAmmoOut(ammoMgr.ammoOut + ammoAmount)
                                end
                            end
                        end
                    end
				end
			end)
		end
	end)
	local UserInputService = game:GetService("UserInputService")
    local running = false
    
    UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            running = true
            while running do
                task.wait()
                local weaponData, guid = v4item.GetEquipped(player)
                            
                if weaponData and ItemMethods.AllowedShoot then
                    if weaponData.ammo then
                        for bullet=1, weaponData.ammo - 1 do
                            if not running then break end
                            if ItemMethods.FastShoot then
                                task.wait(0.01)
                            else
                                if weaponData.fireDebounce then
                                   task.wait(weaponData.fireDebounce)
                                   else return 
                                end
                            end
                            if ItemMethods.SilentShoot then
                                local aimingPoint = SilentMouse(ItemMethods.WallCheck, ItemMethods.KnockedCheck)
                                if aimingPoint then
                                    Shoot(
                                        weaponData,
                                        aimingPoint.Position,
                                        weaponData.firemode
                                    )  
                                else
                                    aimingPoint = mouse.Hit.Position
                                    Shoot(
                                        weaponData,
                                        aimingPoint.Position,
                                        weaponData.firemode
                                    )  
                                end
                            else
                                local aimingPoint = mouse.Hit.Position
                                Shoot(
                                    weaponData,
                                    aimingPoint,
                                    weaponData.firemode
                                ) 
                            end
                        end 
                    end
                end
            end
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            running = false
        end
    end)
end


local window = Bracket:Window({Name = "Ohio killer ReCode | v8", Size = UDim2.new(0, 380, 0, 380)})

local farm_tab = window:Tab({Name = 'Farm'})
local farm_section = farm_tab:Section({Name = 'Money Farm', Side = 'Left'})

farm_section:Toggle({Name = 'ATMs', Callback = function(val)
    FarmTypes.ATM = val
end})

farm_section:Toggle({Name = 'Registers', Callback = function(val)
    FarmTypes.Register = val
end})

local farm_section_dropdown = farm_section:Dropdown({Name = "Teleport method",Flag = "Dropdown",Side = "Left",List = {
    {
        Name = "Hidden",
        Mode = "Button", -- Button or Toggle
        Value = false, -- Default
        Callback = function(Selected)
            FarmTypes.Hidden = true
        end
    },
    {
        Name = "Unhidden",
        Mode = "Button",
        Value = true,
        Callback = function(Selected)
            FarmTypes.Hidden = false
        end
    }
}})

farm_section:Toggle({Name = 'Safe mode', Callback = function(val)
    FarmSafeEnabled = val
end}):Tooltip({Text = "Teleports you to a safe zone after farming all available machines."})

farm_section:Toggle({Name = 'Enabled', Callback = function(val)
    Farm = val
end})

farm_section:Label({Text = '<font color="rgb(191, 191, 191)">NOTE: To disable, press ESC and turn it off.\nSometimes may bug ATMs.</font>'})

local player_tab = window:Tab({Name = 'Player'})

local safemode_section = player_tab:Section({Name = 'Safe Mode', Side = 'Left'})

safemode_section:Toggle({Name = 'Auto Heal', Callback = function(val)
    SafeHeal = val
end}):Tooltip({Text = "Automatically buys and uses bandages when in safe mode [30$]"})

safemode_section:Toggle({Name = 'Auto Armor', Callback = function(val)
    SafeArmor = val
end}):Tooltip({Text = "Automatically buys and uses armor [100$]"})

safemode_section:Toggle({Name = 'Hide Name', Callback = function(val)
    SafeName = val
end}):Tooltip({Text = "Wears mask"})

safemode_section:Slider({Name = 'Minimum Health', Min = 10, Max = 100, Value = 100, Precise = 0, Callback = function(val)
    SafeMin = val
end})

safemode_section:Toggle({Name = 'Auto TP', Callback = function(val)
    SafeMode = val
end})

local locker_section = player_tab:Section({Name = 'Locker', Side = 'Left'})
locker_section:Label({Text = '<font color="rgb(191, 191, 191)">NOTE: Shows backpack locker</font>'})
locker_section:Toggle({Name = 'Enabled', Callback = function(val)
    LockerEnabled = val
end})

local combat_section = player_tab:Section({Name = 'Combat', Side = 'Right'})
combat_section:Label({Text = '<font color="rgb(191, 191, 191)">NOTE: Equip fists for Kill Aura.</font>'})
combat_section:Toggle({Name = 'Kill Aura', Callback = function(val)
    PlayerMethods.KillAura = val
end})

combat_section:Toggle({Name = 'Auto Stomp', Callback = function(val)
    PlayerMethods.AutoStomp = val
end})

local fly_section = player_tab:Section({Name = 'Movement', Side = 'Right'})
local FlyBeforePos
fly_section:Label({Text = '<font color="rgb(191, 191, 191)">NOTE: You are invisible to others while flying.</font>'})
fly_section:Toggle({Name = 'Fly', Callback = function(val)
    task.spawn(function()
        local Value = val
        local character = getCurrentCharacter()
        if not character then return end
            
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if not humanoidRootPart then return end
            
        if Value then
            FlyBeforePos = humanoidRootPart.CFrame
            humanoidRootPart.CFrame = SafeZone

            task.wait(0.1)
            Nav.Flying = true
            PlayerMethods.Fly = true
            
            humanoidRootPart.CFrame = FlyBeforePos
        else
            Nav.Flying = false
            PlayerMethods.Fly = false
        end
    end)
end})

fly_section:Slider({Name = 'Speed', Min = 1, Max = 15, Value = 1, Precise = 0, Callback = function(val)
    MovementSpeed = val
end})
fly_section:Slider({Name = 'Height', Min = 1, Max = 15, Value = 1, Precise = 0, Callback = function(val)
    MovementHeight = val
end})


local teleport_section = player_tab:Section({Name = "Target", Side = "Right"})
local player_textbox
player_textbox = teleport_section:Textbox({
    Placeholder = 'Player Name',
    HideName = true,
    Callback = function(input_text, enterPressed)
        if not enterPressed then return end
        if player_textbox.isSetting then return end

        local players = game:GetService("Players"):GetPlayers()
        local input_lower = input_text:lower()
        local matches = {}

        for _, p in ipairs(players) do
            local player_name = p.Name
            if player_name:lower():sub(1, #input_lower) == input_lower then
                table.insert(matches, player_name)
            end
        end

        if #matches >= 0 then
            player_textbox.isSetting = true
            player_textbox.Value = matches[1]
            player_textbox.isSetting = false
            PlayerMethods.Target = matches[1]
        end
    end
})

local teleport_section_dropdown = teleport_section:Dropdown({Name = "Target method",Flag = "Dropdown",Side = "Left",List = {
    {
        Name = "None",
        Mode = "Button", -- Button or Toggle
        Value = true, -- Default
        Callback = function(Selected)
            PlayerMethods.TargetKill = false
            PlayerMethods.TargetBring = false
        end
    },
    {
        Name = "Kill",
        Mode = "Button", -- Button or Toggle
        Value = false, -- Default
        Callback = function(Selected)
            PlayerMethods.TargetKill = true
            PlayerMethods.TargetBring = false
        end
    },
    {
        Name = "Bring",
        Mode = "Button",
        Value = true,
        Callback = function(Selected)
            PlayerMethods.TargetKill = false
            PlayerMethods.TargetBring = true
        end
    }
}})

teleport_section:Button({Name = "Teleport", Callback = function() 
    PlayerMethods.Target = player_textbox.Value
    if PlayerMethods.Target then
        local Player = game:GetService('Players')[PlayerMethods.Target]
        if Player then
            local Character = Player.Character or Player.CharacterAdded:Wait()
            if Character then
                local RootPart = Character:FindFirstChild('HumanoidRootPart')
                if RootPart then
                    local SelfCharacter = getCurrentCharacter()
                    if SelfCharacter then
                        local ForceField = SelfCharacter:FindFirstChild('ForceField')
                        local RootPart = SelfCharacter:FindFirstChild('HumanoidRootPart')
                        if RootPart and not ForceField then
                            RootPart.CFrame = Character.HumanoidRootPart.CFrame
                        end
                    end 
                end
            end
        end 
    end
end})


-- Valuables Tab
local valuables_tab = window:Tab({Name = 'Valuables'})
local auto_valuable_section = valuables_tab:Section({Name = 'Valuable', Side = 'Left'})

auto_valuable_section:Button({Name = "Find Valuable", Callback = function() 
    local prompt, part = Seek()
    if prompt and part then
        if not prompt:find('Paint') and not prompt:find('Ring') then
            local character_ = getCurrentCharacter()
    	    local RootPart = character_:FindFirstChild("HumanoidRootPart")
            if RootPart then
                RootPart.CFrame = part.CFrame
            end
        end 
    end
end})

auto_valuable_section:Toggle({Name = 'Safe Mode', Callback = function(val)
    ValuableSafe = val
end}):Tooltip({Text = "After collecting all valuable items, teleport to a safe zone."})

auto_valuable_section:Toggle({Name = 'Most Valuable Only', Callback = function(val)
    if val then
        Priority = { "Marker", 'Void', 'Dark', 'C5', 'Santa' }
    else
        Priority = {
            "Military", "Vest", "Keycard", "Marker", "Barrett", 'Gold', 'Present', 'Key', 'Money', 'RPG', 'Saiga', 'Scar', 'Block', 'M249', 'Hoverboard', 'Gravity', 'Dragunov', 'Void', 'Dark', 'C4', 'C5', 'Santa', 'Acid', 'AS Val', 'AUG', 'Python', 'RPK', 'FN', 'P90', 'Diamond', 'Tactical', 'Topaz', 'Treasure', 'Grenade', 'Nuke', 'AR-15', 'MP7', 'Deagle', 'Gun', 'Flamethrower', 'Ruby', 'Sapphire', 'Amethyst', 'Rollie', 'Glock',
        }
    end
end}):Tooltip({Text = "Filters the auto-collector to only pick up the rarest items."})
auto_valuable_section:Toggle({Name = 'Notification', Callback = function(val)
    task.spawn(function()
        PlayerMethods.Notification2 = val
    end)
end})
auto_valuable_section:Toggle({Name = 'Auto', Callback = function(val)
    ValuableAuto = val
end})

local teleport_objects_section = valuables_tab:Section({Name = 'Teleport to Objects', Side = 'Right'})

teleport_objects_section:Button({Name = 'Goto Airdrop', Callback = function()
    task.spawn(function()
        local rootPart = getCurrentCharacter() and getCurrentCharacter():FindFirstChild('HumanoidRootPart')
        if not rootPart then return end
        local airdrops = workspace.Game.Airdrops
        local drop = nil
        for i, v in pairs(airdrops:GetChildren()) do
            drop = v
        end
        if drop and drop.PrimaryPart then
            rootPart.CFrame = drop.PrimaryPart.CFrame
        end
    end)
end})

teleport_objects_section:Button({Name = 'Goto Safe / Chest', Callback = function()
    local lootables = SeekSC()
    if #lootables > 0 then
        local char = getCurrentCharacter()
        if char then
            local root = char:FindFirstChild('HumanoidRootPart')
            if root then
                root.CFrame = lootables[1].primary.CFrame + Vector3.new(0, 3, 0)
            end
        end
    end
end})

teleport_objects_section:Button({Name = 'Goto Treasure Marker', Callback = function()
    task.spawn(function()
        local rootPart = getCurrentCharacter() and getCurrentCharacter():FindFirstChild('HumanoidRootPart')
        if not rootPart then return end
        local Path = workspace.Game.Local.Debris.TreasureMarker
        if Path then
            rootPart.CFrame = Path.CFrame
            for _, o in pairs(Path:GetChildren()) do
                if o:IsA('ProximityPrompt') then
                    o.HoldDuration = 0
                end
            end
        end
    end)
end})

teleport_objects_section:Toggle({Name = 'Auto Loot', Callback = function(val)
    task.spawn(function()
        PlayerMethods.AutoLoot = val
    end)
end})
teleport_objects_section:Toggle({Name = 'Auto Sell', Callback = function(val)
    task.spawn(function()
        PlayerMethods.AutoSell = val
    end)
end})
teleport_objects_section:Toggle({Name = 'Notification', Callback = function(val)
    task.spawn(function()
        PlayerMethods.Notification = val
    end)
end})
teleport_objects_section:Toggle({Name = 'Safe Mode', Callback = function(val)
    task.spawn(function()
        PlayerMethods.AutoLootSafe = val
    end)
end})

local other_utils_section = valuables_tab:Section({Name = 'Other Utilities', Side = 'Right'})
other_utils_section:Button({Name = 'Remove Cooldowns', Callback = function()
    for _, o in pairs(workspace:GetDescendants()) do
        if o:IsA('ProximityPrompt') then
            o.HoldDuration = 0
        end
    end
end}):Tooltip({Text = "Sets the hold duration for all ProximityPrompts in the game to 0."})

other_utils_section:Button({Name = 'Sell Equipped', Callback = function()
    task.spawn(function()
        local _, item = v4item.GetEquipped(player)
        if item then
            Signal.FireServer("sellItem", item)
        end
    end)
end})

-- Travel Tab
local travel_tab = window:Tab({Name = 'Travel'})
local places_section = travel_tab:Section({Name = 'Places', Side = 'Left'})
local dropped_section = travel_tab:Section({Name = 'Dropped Items', Side = 'Right'})

local destinations = {
    ["Police Station"] = workspace.ArmoryRobbery.ArmoryTrigger,
    ["Military Base"] = workspace.MilitaryRobbery.MilitaryTrigger,
    ["Bank"] = workspace.BankRobbery.BankAlarm,
    ["Armory"] = workspace.LandmarkNodes.Nodes.armory1,
    ["Safe Zone"] = workspace.SecretEggSpawns.SecretEgg3,
    ['Jewelry'] = workspace.GemRobbery.AlarmLights,
    ['Hospital'] = CFrame.new(1168.04468, 35.0443974, -972.782654, 0, 0, -1, 0, 1, 0, 1, 0, 0)
}

for dest_name, dest_obj in pairs(destinations) do
    places_section:Button({Name = dest_name, Callback = function()
        local rootPart = getCurrentCharacter() and getCurrentCharacter():FindFirstChild('HumanoidRootPart')
        if not rootPart then return end
        
        if typeof(dest_obj) == 'CFrame' then
            rootPart.CFrame = dest_obj
        else
            rootPart.CFrame = dest_obj.CFrame
        end
    end})
end

dropped_section:Button({Name = "Ammo Box", Callback = function()
    local rootPart = getCurrentCharacter() and getCurrentCharacter():FindFirstChild('HumanoidRootPart')
    if not rootPart then return end
    local destination = workspace.Game.Local.droppables["Ammo Box"]
    if destination and destination.PrimaryPart then
        rootPart.CFrame = destination.PrimaryPart.CFrame
    end
end})

dropped_section:Button({Name = "Money Printer", Callback = function()
    local rootPart = getCurrentCharacter() and getCurrentCharacter():FindFirstChild('HumanoidRootPart')
    if not rootPart then return end
    local destination = workspace.Game.Local.droppables["Money Printer"]
    if destination and destination.PrimaryPart then
        rootPart.CFrame = destination.PrimaryPart.CFrame
    end
end})

-- Item Tab
local item_tab = window:Tab({Name = 'Item'})
local spam_throw_section = item_tab:Section({Name = 'Spam Throw', Side = 'Left'})
local item_textbox
item_textbox = spam_throw_section:Textbox({
    Placeholder = 'Item Name',
    HideName = true,
    Callback = function(input_text, enterPressed)
        if not enterPressed then return end
        if item_textbox.isSetting then return end

        local items = {'Banana Peel', 'Frag', 'C4', 'Molotov', 'Airdrop Marker'}
        local input_lower = input_text:lower()
        local matches = {}

        for _, item in ipairs(items) do
            if item:lower():sub(1, #input_lower) == input_lower then
                table.insert(matches, item)
            end
        end

        if #matches > 0 then
            item_textbox.isSetting = true
            item_textbox.Value = matches[1]
            item_textbox.isSetting = false
        else
            item_textbox.isSetting = true
            item_textbox.Value = input_text
            item_textbox.isSetting = false
        end
    end
})
spam_throw_section:Toggle({Name = 'Enabled', Callback = function(val)
    task.spawn(function()
        ItemMethods.Item = item_textbox.Value
        ItemMethods.Enabled = val
    end)
end})

local fast_shoot_section = item_tab:Section({Name = 'Weapon mod', Side = 'Right'})
local fast_shoot_section_2 = item_tab:Section({Name = 'Shooting', Side = 'Right'})
fast_shoot_section:Toggle({Name = 'Silent Aim', Callback = function(val)
    task.spawn(function()
        ItemMethods.SilentShoot = val
    end)
end})
fast_shoot_section:Toggle({Name = 'No Spread', Callback = function(val)
    task.spawn(function()
        ItemMethods.NoSpread = val
    end)
end})
fast_shoot_section:Toggle({Name = 'Wall Check', Callback = function(val)
    task.spawn(function()
        ItemMethods.WallCheck = val
    end)
end})
fast_shoot_section:Toggle({Name = 'Knocked Check', Callback = function(val)
    task.spawn(function()
        ItemMethods.KnockedCheck = val
    end)
end})
fast_shoot_section:Label({Text = '<font color="rgb(255, 160, 0)">WARNING: Without permission you cant do anything</font>'})
fast_shoot_section:Toggle({Name = 'Allow modding', Callback = function(val)
    task.spawn(function()
        ItemMethods.AllowedShoot = val
    end)
end})
fast_shoot_section_2:Toggle({Name = 'Fast Shoot', Callback = function(val)
    task.spawn(function()
        ItemMethods.FastShoot = val
    end)
end})

local ammo_buy_section = item_tab:Section({Name = 'Auto buy', Side = 'Left'})

ammo_buy_section:Toggle({Name = 'Ammo', Callback = function(val)
    task.spawn(function()
        ItemMethods.AmmoBuy = val
    end)
end})

InitAll()
