
local ReplicatedStorage = game.ReplicatedStorage
local players = game.Players
local camera = workspace.CurrentCamera
local player = players.LocalPlayer

local IsStudio = RunService:IsStudio()

--// Fetch library
local ImGui
if IsStudio then
    ImGui = require(ReplicatedStorage.ImGui)
else
    local SourceURL = 'https://github.com/depthso/Roblox-ImGUI/raw/main/ImGui.lua'
    ImGui = loadstring(game:HttpGet(SourceURL))()
end

--// Window 
local Window = ImGui:CreateWindow({
    Title = "BLOXKILLER.GG",
    Size = UDim2.new(0, 400, 0, 300),
    Position = UDim2.new(0.5, 0, 0, 70)
})
Window:Center()
print(Window.Name)

-- ESP Script
local espEnabled = false -- Toggle state
local espElements = {} -- Store ESP elements for each player
local espColor = Color3.fromRGB(255, 255, 255) -- Default ESP box color (white)

-- Create a new ESP element (box)
local function createESP()
    local box = Drawing.new("Square")
    box.Thickness = 2
    box.Color = espColor -- Use the current color for the ESP box
    box.Filled = false

    return {box = box}
end

-- Function to toggle ESP
local function toggleESP()
    espEnabled = not espEnabled
    if not espEnabled and #espElements > 0 then
        -- If ESP is being disabled, hide and remove all drawings
        for _, espElement in pairs(espElements) do
            if espElement then
                -- Set visibility to false to hide everything
                espElement.box.Visible = false

                -- Call Remove to completely delete the drawings
                espElement.box:Remove()
            end
        end
        -- Clear the espElements table so that they will be recreated when ESP is toggled back on
        espElements = {}
        print("ESP disabled and all drawings removed")
    else
        print("ESP enabled")
    end
end

-- Function to update the ESP for players
local function updateESP(mode, TeamCheck)
    if mode then
        pcall(function()
            -- Hide all ESP elements before drawing the next frame
            for _, espElement in pairs(espElements) do
                espElement.box.Visible = false
            end

            -- Update ESP for each player
            for _, targetPlayer in pairs(players:GetPlayers()) do
                if targetPlayer ~= player and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local humanoidRootPart = targetPlayer.Character.HumanoidRootPart
                    local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")

                    -- Team Check
                    if (not TeamCheck) or (targetPlayer.Team ~= player.Team) then
                        if humanoid and humanoid.Health > 0 then
                            local screenPos, onScreen = camera:WorldToViewportPoint(humanoidRootPart.Position)
                            if onScreen then
                                -- Calculate box size and position based on the humanoid size
                                local headPos = camera:WorldToViewportPoint(targetPlayer.Character.Head.Position)
                                local legPos = camera:WorldToViewportPoint((humanoidRootPart.Position - Vector3.new(0, 3, 0))) -- Adjust for leg position
                                local boxHeight = math.abs(headPos.Y - legPos.Y)
                                local boxWidth = boxHeight / 2

                                -- Set ESP box properties
                                espElements[targetPlayer].box.Size = Vector2.new(boxWidth, boxHeight)
                                espElements[targetPlayer].box.Position = Vector2.new(screenPos.X - boxWidth / 2, screenPos.Y - boxHeight / 2)
                                espElements[targetPlayer].box.Color = espColor -- Use the fixed white color
                                espElements[targetPlayer].box.Visible = true
                            end
                        end
                    end
                end
            end
        end)
    else
        -- Disable ESP when mode is false
        pcall(function()
            for _, espElement in pairs(espElements) do
                espElement.box.Visible = false
            end
        end)
    end
end

-- Initialize ESP elements for existing players
for _, targetPlayer in pairs(players:GetPlayers()) do
    if targetPlayer ~= player then
        espElements[targetPlayer] = createESP()
    end
end

players.PlayerAdded:Connect(function(targetPlayer)
    espElements[targetPlayer] = createESP()
end)

players.PlayerRemoving:Connect(function(targetPlayer)
    if espElements[targetPlayer] then
        espElements[targetPlayer].box:Remove()
        espElements[targetPlayer] = nil
    end
end)

function RotateCheck()
pcall(function()
	if not player.character.PrimaryPart:FindFirstChildOfClass("BodyAngularVelocity") then
		local bodyAngularVelocity = Instance.new("BodyAngularVelocity")
		bodyAngularVelocity.Parent = player.character.PrimaryPart
	end
end)
end
-- Creating the Visuals tab
local VisualsTab = Window:CreateTab({
    Name = "Visuals",
})


-- Add a toggle for Visuals
VisualsTab:Checkbox({
    Label = "ESP Enabled",
    Value = espEnabled,
    Callback = function(self, Value)
        espEnabled = Value
    end
})
local TeamCheckVisuals = false
VisualsTab:Checkbox({
    Label = "Team Check",
    Value = false,
    Callback = function(self, Value)
        TeamCheckVisuals = Value
    end
})
-- Creating the Camera tab
local CameraTab = Window:CreateTab({
    Name = "Camera",
})

-- Add a toggle for camera
local cameraEnabled = false
local TeamCheckCamera = false
local AimbotCheckbox = CameraTab:Checkbox({
    Label = "Aimbot Enabled",
    Value = cameraEnabled,
    Callback = function(self, Value)
        cameraEnabled = Value
	end
})

CameraTab:Checkbox({
    Label = "Team check",
    Value = false,
    Callback = function(self, Value)
        TeamCheckCamera = Value
	end
})

CameraTab:Keybind({
	Label = "Aimbot",
	Value = Enum.KeyCode.E,
	IgnoreGameProcessed = false,
	Callback = function(self, KeyCode)
		AimbotCheckbox:Toggle()
	end,
})

local AimbotPart = 1
CameraTab:Combo({
	Placeholder = "Head",
	Label = "Select aim part",
	Items = {
		["Torso"] = 0,
		["Head"] = 1,
	},
	Callback = function(self, Value)
		AimbotPart = Value
	end,
})
MinDistanceValue = 25
CameraTab:Slider({
	Label = "FOV Radius",
	Format = "%s",
	Value = math.round(MinDistanceValue),
	MinValue = 5,
	MaxValue = 200,
	ReadOnly = false,

	Callback = function(self, Value)
		MinDistanceValue = Value
	end,
})

local Inputs = CameraTab:CollapsingHeader({
	Title = "Anti-aim"
})
local SpinBot = false
Inputs:Checkbox({
    Label = "Rotating",
    Value = false,
    Callback = function(self, Value)
        SpinBot = Value
	end
})

local PlayerTab = Window:CreateTab({
    Name = "Player",
})

local Teleports = PlayerTab:CollapsingHeader({
	Title = "Teleport"
})

Teleports:Button({
	Text = "CT",
	Callback = function(self)
		pcall(function()
			local Map = workspace.Map
			local CTspawn = Map.CTSpawns
			player.Character.PrimaryPart.CFrame = CFrame.new(CTspawn:FindFirstChildOfClass('Part').Position)
		end)
	end
})
Teleports:Button({
	Text = "T",
	Callback = function(self)
		pcall(function()
			local Map = workspace.Map
			local Tspawn = Map.TSpawns
			player.Character.PrimaryPart.CFrame = CFrame.new(Tspawn:FindFirstChildOfClass('Part').Position)
		end)
	end
})


local SpeedBypass = false
local SpeedValue = 0
local Thirdperson = false
PlayerTab:Checkbox({
    Label = "Thirdperson (Unlocks camera)",
    Value = false,
    Callback = function(self, Value)
        Thirdperson = Value
	end
})

PlayerTab:Checkbox({
    Label = "Speed",
    Value = false,
    Callback = function(self, Value)
        SpeedBypass = Value
	end
})
PlayerTab:Slider({
	Label = "Speed multiplayer",
	Format = "%s",
	Value = math.round(SpeedValue),
	MinValue = 0,
	MaxValue = 10,
	ReadOnly = false,

	Callback = function(self, Value)
		SpeedValue = Value
	end,
})


local InfoTab = Window:CreateTab({
    Name = "Info",
})

InfoTab:Separator({
	Text = 'Made by HOKJHa | V1.2'
})


coroutine.wrap(function()
    while task.wait() do
		if Thirdperson then
			pcall(function()
				camera.Arms:Destroy()
				player.CameraMaxZoomDistance = 30
				player.CameraMinZoomDistance = 29
			end)
		end
		if SpeedBypass then
			pcall(function ()
			local character = player.Character
			local humanoid = character.Humanoid
			character.PrimaryPart.CFrame += (humanoid.MoveDirection / 10) * SpeedValue
			end)
		end
		if SpinBot then
			pcall(function ()
				player.Character.PrimaryPart.RotVelocity = Vector3.new(0, 100, 0)
			end)
		end
        if espEnabled then
            updateESP(true, TeamCheckVisuals)
		else
			updateESP(false)
        end
		if cameraEnabled then
			pcall(function ()
				local player = game.Players.LocalPlayer
			local mouse = player:GetMouse()
			local camera = workspace.CurrentCamera
			local players = game.Players
			local userInputService = game:GetService("UserInputService")

			-- Function to find the nearest player to the mouse
			local function getNearestPlayerToMouse()
    		local nearestPlayer = nil
    		local shortestDistance = math.huge -- Start with an infinitely large number

    		for _, targetPlayer in pairs(players:GetPlayers()) do
        		if targetPlayer ~= player and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            		local screenPos, onScreen = camera:WorldToScreenPoint(targetPlayer.Character.HumanoidRootPart.Position)
           			if onScreen then
                		local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                		if distance < shortestDistance then
                    		shortestDistance = distance
                    		nearestPlayer = targetPlayer
                			end
            			end
        			end
    			end
    			return nearestPlayer
			end
			local function rotateCameraToPlayer()
				local OnScreen = camera:WorldToScreenPoint(getNearestPlayerToMouse().Character.Head.Position)
				local Distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(OnScreen.X, OnScreen.Y)).Magnitude

				if Distance <= MinDistanceValue then
					if AimbotPart == 0 then
						pcall(function()
						local targetPlayer = getNearestPlayerToMouse()
       					if TeamCheckCamera then
							if targetPlayer.Team ~= player.Team then
							if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
							local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
							local cameraPosition = camera.CFrame.Position
							local direction = (targetPosition - cameraPosition).unit -- Get the direction vector to the target

            				camera.CFrame = CFrame.new(cameraPosition, cameraPosition + direction)
       						end
							end
						else
							if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
							local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
							local cameraPosition = camera.CFrame.Position
							local direction = (targetPosition - cameraPosition).unit -- Get the direction vector to the target

            				camera.CFrame = CFrame.new(cameraPosition, cameraPosition + direction)
       						end	
						end
					end)
						else
						pcall(function()
						local targetPlayer = getNearestPlayerToMouse()
       					if TeamCheckCamera then
							if targetPlayer.Team ~= player.Team then
							if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
							local targetPosition = targetPlayer.Character.Head.Position
							local cameraPosition = camera.CFrame.Position
							local direction = (targetPosition - cameraPosition).unit -- Get the direction vector to the target

            				camera.CFrame = CFrame.new(cameraPosition, cameraPosition + direction)
       						end
							end
						else
							if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
							local targetPosition = targetPlayer.Character.Head.Position
							local cameraPosition = camera.CFrame.Position
							local direction = (targetPosition - cameraPosition).unit -- Get the direction vector to the target
							-- Use CFrame.lookAt to rotate the camera without changing its position
							camera.CFrame = CFrame.lookAt(cameraPosition, targetPosition)
							end
						end
					end)
				end
				end
			end
		rotateCameraToPlayer()
			end)
		end
    end
end)()


while task.wait() do
	pcall(function ()
		player.Character.Humanoid.Died:Connect(function()
			if SpinBot then
				pcall(function ()
					player.Character.PrimaryPart.RotVelocity = Vector3.new(0, 100, 0)
				end)
			end
		end)
	end)
end
